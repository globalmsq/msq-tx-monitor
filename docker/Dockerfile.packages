# Multi-stage Dockerfile for MSQ Transaction Monitor
# Build argument to specify which service to build
ARG SERVICE_NAME

# =============================================================================
# Base stage - Common base for all Node.js services
# =============================================================================
FROM node:18-alpine AS base
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm@9.0.0
RUN apk add --no-cache python3 make g++ curl openssl

# Copy workspace configuration first
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY nx.json tsconfig.base.json ./

# Copy all source code before installing dependencies
COPY libs ./libs/
COPY apps ./apps/

# Install dependencies with pnpm (workspace packages now available)
RUN pnpm install --no-frozen-lockfile --ignore-scripts

# Generate Prisma client for database library
RUN cd libs/database && npx prisma generate --schema=prisma/schema.prisma

# Install @prisma/client explicitly at workspace level
RUN pnpm add @prisma/client --workspace-root


# =============================================================================
# Development stage for tx-api (Express.js)
# =============================================================================
FROM base AS tx-api
WORKDIR /app/apps/tx-api

EXPOSE 8000
CMD ["pnpm", "start"]

# =============================================================================
# Development stage for chain-scanner (Node.js)
# =============================================================================
FROM base AS chain-scanner
WORKDIR /app/apps/chain-scanner

EXPOSE 8001
CMD ["pnpm", "start"]

# =============================================================================
# Development stage for tx-analyzer (Python FastAPI)
# =============================================================================
FROM python:3.11-slim AS tx-analyzer
WORKDIR /app
RUN apt-get update && apt-get install -y \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy only tx-analyzer
COPY apps/tx-analyzer/requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY apps/tx-analyzer ./
EXPOSE 8002
CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"]